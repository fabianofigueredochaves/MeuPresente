package com.example.meupresente.ViewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.meupresente.data.AppRepository
import com.example.meupresente.models.User
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.map // Importar o operador map
import android.util.Patterns // Import para valida√ß√£o de e-mail
import com.example.meupresente.models.Friendship

// Eventos para a UI (ex: SnackBar)
sealed class ManageFriendsEvent {
    data class ShowMessage(val message: String) : ManageFriendsEvent()
}

class ManageFriendsViewModel(
    private val repository: AppRepository,
    private val currentUserId: Long
) : ViewModel() {

    // --- Estado para o campo de input de e-mail ---
    private val _friendEmailInput = MutableStateFlow("")
    val friendEmailInput = _friendEmailInput.asStateFlow()

    fun onFriendEmailInputChange(email: String) {
        _friendEmailInput.value = email
    }

    // --- üëá MUDAN√áA MAIS IMPORTANTE AQUI üëá ---
    // Agora expomos uma lista de Strings (emails), em vez de objetos User.
    //val friends: StateFlow<List<String>> = repository.getFriendships(currentUserId)
     //   .map { friendships -> // Usamos o operador map para transformar a lista de Friendship
     //       friendships.map { it.friendEmail } // Extra√≠mos apenas o friendEmail de cada Friendship
     //   }
    val friends: StateFlow<List<Friendship>> = repository.getFriendships(currentUserId)
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = emptyList()
        )
    // --- FIM DA MUDAN√áA MAIS IMPORTANTE ---


    // --- Eventos de mensagens (ex: para mostrar um SnackBar) ---
    private val _event = MutableSharedFlow<ManageFriendsEvent>()
    val event = _event.asSharedFlow()

    // --- Fun√ß√µes para adicionar e remover amigos ---

    fun addFriend() {
        val emailToAdd = _friendEmailInput.value.trim().lowercase()

        viewModelScope.launch {
            if (emailToAdd.isBlank()) {
                _event.emit(ManageFriendsEvent.ShowMessage("O e-mail n√£o pode estar em branco."))
                return@launch
            }

            if (!isValidEmail(emailToAdd)) {
                    _event.emit(ManageFriendsEvent.ShowMessage("Formato de e-mail de amigo inv√°lido."))
                    return@launch
            }

            // Verifica se o e-mail do amigo existe no Firebase (se ele se registrou no app)
            val friendFirebaseUid = repository.getFirebaseUserUidByEmail(emailToAdd)
            if (friendFirebaseUid == null) {
                    _event.emit(ManageFriendsEvent.ShowMessage("Usu√°rio com este e-mail n√£o encontrado no aplicativo."))
                    return@launch
            }
            

            // Evitar adicionar a si mesmo
            val currentUser = repository.getUserById(currentUserId) // Seu TXT tem getUserById
            if (currentUser != null && emailToAdd == currentUser.email.lowercase()) {
                _event.emit(ManageFriendsEvent.ShowMessage("Voc√™ n√£o pode adicionar a si mesmo como amigo(a)."))
                return@launch
            }
            /*

            // Precisamos verificar se o e-mail existe no banco de dados geral de usu√°rios
            val friendUser = repository.getUserByEmail(emailToAdd) // Seu TXT tem getUserByEmail
            if (friendUser == null) {
                _event.emit(ManageFriendsEvent.ShowMessage("Usu√°rio com este e-mail n√£o encontrado."))
                return@launch
            }
            */

            // Verificar se j√° √© amigo(a)
            val currentFriendships = repository.getFriendships(currentUserId).first() // Pega a lista atual uma vez
            if (currentFriendships.any { it.friendEmail.equals(emailToAdd, ignoreCase = true) }) {
                // Aqui, como n√£o temos o nome do amigo ainda, usamos o email ou um placeholder
                //_event.emit(ManageFriendsEvent.ShowMessage("Voc√™ j√° √© amigo(a) de ${"friendUser.name" ?: emailToAdd}."))
              //  val friendName = repository.getFirebaseUserNameByUid(friendFirebaseUid) ?: emailToAdd
                //_event.emit(ManageFriendsEvent.ShowMessage("Voc√™ j√° √© amigo(a) de ${friendName}."))
                _event.emit(ManageFriendsEvent.ShowMessage("Voc√™ j√° √© amigo(a) de ${emailToAdd}."))
                return@launch
            }

            repository.addFriend(currentUserId, emailToAdd)
            _friendEmailInput.value = "" // Limpa o campo ap√≥s sucesso
            // Feedback mais gen√©rico, j√° que n√£o garantimos o nome do amigo neste momento
            //_event.emit(ManageFriendsEvent.ShowMessage("Amigo ${"friendUser.name" ?: emailToAdd} adicionado(a)!"))
            val friendName = repository.getFirebaseUserNameByUid(friendFirebaseUid) ?: emailToAdd
            _event.emit(ManageFriendsEvent.ShowMessage("Amigo ${friendName} adicionado(a)!"))
        }
    }

    // --- Fun√ß√£o Auxiliar de Valida√ß√£o ---
    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }
    fun removeFriend(friendEmail: String) {
        viewModelScope.launch {
            repository.removeFriend(currentUserId, friendEmail.lowercase())
            // Feedback mais gen√©rico
            val removedFriendDisplay = repository.getUserByEmail(friendEmail)?.name ?: friendEmail // Tenta pegar o nome se existir
            _event.emit(ManageFriendsEvent.ShowMessage("${removedFriendDisplay} removido(a) dos seus amigos."))
        }
    }
}